* 帮助
 注: 以"C-h"或F1为前缀的命令.
 
 C-h,t : 调出emacs tutorial.
 C-h,r : 调出emacs manual.
 C-h,i : 调出info文档系统. 前面加前缀"C-u"可以选择打开哪个info文档.
 C-h-f : 调出emacs FAQ.
 C-h,g : 查看R.M.S写的GNU 计划.
 C-h-t : 查看emacs todo-list.
 C-h,f/F, [函数名] : 查看函数文档/在info中.(不指定函数名则默认为光标处的函数.)
 C-h,p/P : 根据关键词查看emacs中的package.
 C-h,v, [变量名] : 查看变量的文档.(不指定变量名则默认为光标处的变量.)
 C-h,w, [函数名] : 查看该函数的键绑定.
 C-h,c, [快捷键] : 查看快捷键所绑定的函数.(可以用来查看快捷键在系统中的表示法).í
 C-h,k/K, [快捷键] : 查看快捷键所绑定的函数/在manual中的文档.
 C-h,b : 查看当前mode中所有活跃的键绑定.
 C-h,m : 查看当前major mode的文档.
 C-h,n : 查看emacs更新改动.
 C-h,a, [topic] : 查看匹配该topic的所有命令.
 C-h,d, [topic] : 查看命令及变量,其文档匹配该topic.
 C-h,e : 查看'*Messages*'buffer.
 C-h,S [符号] : 查看该符号的info文档,通常用于编程环境.
 M-x,apropos [关键词] : 查看与该关键词相关的所有命令,函数,变量.
 C-h,l : 查看最近100个键盘输入.
 C-h,L [语言环境] : 显示指定语言环境信息,默认为当前buffer的语言环境.
 C-h,I [输入法] :显示指定输入法信息,默认为当前buffer的输入法.
 C-h,C [编码方式] : 显示指定编码方式的信息,默认为当前buffer的编码方式.
 M-x,open-dribble-file [文件名] : 指定一个文件,记录emacs运行时的所有键盘输入.
 [命令前缀], C-h : 列出该前缀的所有命令.

 在帮助buffer中:
 C-c-c : 查看光标所在处符号的帮助文档.
 C-c-b : 回到上一个帮助主题.

* 启动和退出
  
  initial-buffer-choice : 设置emacs启动时,最初打开的文件或目录.

  emacs -nw : 在字符终端下启动emscs.
  emacs --debug-init : 调试初始化文件.
  emacs -q : 不加载任何初始化文件.
  emacs -u 用户 : 加载指定用户的初始化文件.(如果失败,将不加载任何初始化文件)
  emacs 文件名列表 : 同时打开指定的多个文,当前缓冲区将显示最后一个文件.
  emacs +n 文件名 ： 打开文件时将光标置于第n行.
  emacs +n:m 文件名 ： 打开文件时将光标置于第n行第m列.
  emacs (+n:m) file_A --insert file_B : 在file_A开头(第n行第m列),插入file_B.
  emacs -l lisp文件 : 加载一个lisp文件.
  emacs -f elisp函数名 : 执行指定的elisp函数.
  emacs --eval lisp表达式 : 执行指定lisp表达式.
  C-x-c : 保存修改,并退出emacs.
  C-z   : 最小化emacs(图形界面);挂起emacs(文本终端),用'%emacs'命令恢复.

* 常用操作
  
  C-g : 终止当前命令.
  C-/ : 撤销上次命令(undo).任何非undo的操作,都将中断undo序列,此后若继续undo,将undo以前undo过的操作(也就是redo).
  C-u-/ : 将对选中的区域内的最近的操作进行undo.
  M-x,undo-only : 继续以前的undo序列,不进行redo.
  M-[数字] / C-u-[数字] [命令]: 参数前缀.("C-u"默认为4).(注:命令可以是快捷键或"M-x,命令名".)
  C-u 可以用来终止数字前缀参数 : 'C-u,50,C-u,0' 将输入50个0.
  [命令],(参数)C-x,z : 重复执行上一条[命令][参数]次.(每键入一次"z"重复(参数)次命令").
  C-q,[字符] : 输入该字符本身,忽略其含义. (例如"C-q,TAB"就是插入"tab"本身非补全).
  C-x,8,RET : 输入特殊字符.用Unicode name 或 编码.

* 文件
  注: *buffer*名两边加星号表示该buffer是emacs创建的特殊缓冲区,不关联任何文件.
  *Message* : 

  C-x-f : 新建缓冲区,并载入指定文件. 输入/sudo::密码 即可以root权限编辑文件. 文件名可以带通配符(用find-file-wildcards变量控制是否开启此特性).
  C-x-r : 以只读方式打开指定文件.
  C-x-v : 将指定文件替换当前缓冲区的内容,用于打开错误的文件后重新打开正确的文件.
  C-x-s : 将当前缓冲区内容写回其所关联的文件.
  C-x,s : 将所有已修改的缓冲区,保存到相应的文件.交互地询问用户,需要将哪些修改过的缓冲区保存到文件.
  C-x-w : 将当前缓冲区保存在指定文件里,同时关联二者.(当前缓冲区与原文件脱离关系)
  C-x,i [文件名] : 将指定文件的内容插入到光标处.
  M-~ : 将当前buffer标记为未修改过,将忽略任何文件保存命令.

  M-x,set-visited-file-name : 仅改变当前buffer的文件名,同时与原文件取消关联,并不产生新的文件, 稍后如果执行保存操作则将产生一个新的文件.

  M-x, buffer-menu : 打开缓冲区管理菜单.
  
  CRM:
  C: current buffer. 前面带一个"."
  R: read only. "%" 表示只读.
  M: modified. "*" 表示修改过.

** 备份文件

     file-name~为备份文件.在打开某个文件后进行第一次保存时(C-x-s),将
     (提前)对原文件做一次备份,其后的所有保存动作将不影响该备份文件.当
     下一次再打开该文件并保存时,老的备份文件将被新的备份文件代替. 变量
     make-backup-files控制是否保留备份文件,默认为't'保留.
  
** 文件锁定

   当buffer含有未被保存的内容时,其所关联的文件将被锁定,其他人若试图修
   改该文件将会被警告,有三中选项可以选择:

   s: 获得该文件的锁定权.
   p: 强行编辑该文件.
   q: 放弃修改.
   
   当系统崩溃时,可能造成先前被锁定的文件未解锁,从而造成错误.

** 时间戳

   在文件的前8行内添加:
   Time-stamp: " "
   Time-stamp: <>
   在before-save-hook中添加time-stamp函数,即可在保存文件时自动更新时间戳.

** 自动更新buffer

   M-x,revert-buffer : 放弃对当前buffer所作的修改,恢复到文件上一次被保
   存时的状态.(revert之后无法用undo恢复所作的修改)

   auto-revert-mode : 每隔5秒根据文件内容自动更新当前buffer的内容.

   global-auto-revert-mode : 自动更新所有本地buffer的内容.(不更新远程文件的buffer)

   auto-revert-tail-mode : 仅更新buffer尾.

   变量auto-revert-interval: 控制自动更新的间隔.
   
** 临时文件(18.6.3)
   临时文件: #file-name#为临时文件.如果当前缓冲区内容发生变化(且尚未保
   存),emacs就会自动将其保存为临时文件,一旦缓冲区内容写入磁盘(C-x-s),
   临时文件将被自动删除. 当文件被重命名后,该文件的临时文件也会自动重命
   名.

   M-x,auto-save-mode : 仅对当前buffer文件保存临时文件.
   M-x,do-auto-save : 手动保存临时文件.
   M-x,recover-file <RET> 原文件名 <RET> : 从临时文件中恢复原文件内容(需要手动保存一次才能更新原文件).
   M-x,recover-session : 恢复session中所有的文件.
   
** 文件/目录符号链接等(18.7)
** 列出/新建/删除目录(18.8)

   C-x-d [目录名] : 列出目录下的文件名.
   C-u,C-x-d : 列出目录下文件的详细信息.
   M-x,make/delete-directory [目录名] :新建/删除目录.
   
** 比较文件(18.9)

   M-x,diff [文件1] [文件2] : 调用系统的diff命令,比较指定两个文件的差异. 参数配置在"diff-switches"变量中.
   M-x,diff-backup [文件名]: 比较指定文件和其最近的备份文件.
   M-x,diff-buffer-with-file [buffer名] : 比较指定buffer和其关联的文件.
   M-x,compare-windows : 比较当前窗口和下一个窗口中的内容.
   
** 其他文件操作

   M-x,delete-file : 删除指定文件.
   M-x move-file-to-trash : 将指定文件移动到回收站.
   M-x,vc-delete-file : 删除加入到版本控制的文件.
   M-x,copy-file : 拷贝指定文件到新的文件中.
   M-x,copy-directory : 将指定目录拷贝到新目录中.

* 缓冲区(19)
  
  C-x-b : 显示buffer列表. "C-u-x-b": 只列出关联某文件的buffer.可执行一下操作:
        d/C-d : 将当前buffer标记为待删除("D"),同时光标移动到下/上一buffer.(可加参数前缀N,表示同时标记N项.)
	s : 将当前buffer标记为待保存("S"),同时光标移动到下一buffer.注：可以将一个buffer同时标记为"S"和"D".(可加参数前缀N,表示同时标记N项.)
	x : 对所有buffer执行其相应的标记操作.
	u/<DEL> : 清楚当前buffer的所有标记,并使光标移动到下一buffer./光标移动到上一buffer,并清除该buffer的所有标记.(可加参数前缀N,表示清楚N项的标记.)
	m : 将当前buffer标记为带打开("<").
	v : 清除当前frame的布局,将当前buffer及所有标记为待打开的buffer,用不同的窗口显示.
	~ : 将当前buffer标记为unmodified.
	% : 改变当前buffer的只读状态.
	t : 将当前buffer作为"tags table"访问.
	f/<RET> : 打开当前buffer,替换buffer列表.
	o/C-o : 在另一窗口中打开并选中/不选中当前buffer.
	1 : 清除当前frame的布局,仅保留一个用于打开并选中当前buffer.
	2 : 清除当前frame的布局,仅保留两个窗口,一个用于打开并选中当前buffer,另一个用于显示最近的一个buffer.
	S : 按照光标所在字段,对所有buffer进行排序.
	b : 隐藏当前buffer(并不删除).
	g : 更新buffer列表.
	q : 退出buffer列表.
	T : 选择是否在buffer列表中显示无关联文件的buffer.

  C-x,b : 切换到指定缓冲区(默认为前一个缓冲区).可以用来创建新的缓冲区,并将其保存为文件.
  C-x,4/5,b : 在另一个窗口/框架中打开指定缓充区.
  C-x-q : 启动缓冲区的只读模式.
  C-x,<LEFT>/<RIGHT> : 选择缓冲区列表中的上/下一个缓冲区.
  M-x,rename-buffer : 重命名当前缓冲区.
  M-x,rename-uniquely : 在当前缓冲区名称后面加数字后缀,使其唯一.
  C-x,k : 关闭指定缓冲区. (默认为当前缓冲区).
  M-x,kill-some-buffers : 对每一个已打开的buffer,询问用户是否关闭.
  M-x,kill-matching-buffers : 关闭所有名称匹配指定正则表达式的buffer.
  M-x, clean-buffer-list : 关闭所有长时间未使用,且未被修改的buffer.

** indirect buffer

   注:indirect buffer和其base buffer具有完全相同的内容,改变其中一个会
   直接影响另一个,但是对于其他方面,两个buffer是独立的. 删除base buffer
   会清除indirect buffer.

   M-x,make-indirect-buffer : 为指定"base buffer"创建间接buffer.
   M-x,clone-indirect-buffer : 为当前buffer创建间接buffer.
   C-x,4,c: 为当前buffer在另一窗口中创建并选中其间接buffer.
   
* 窗口(20)

  C-x-0/1 : 关闭/仅保留当前窗口.
  C-x-2   : 水平分割当前窗口.前面可加参数/负参数,以指定顶部/底部窗口的高度(以行为单位). (新窗口内容为当前窗口内容的副本)
  C-x-3   : 垂直分割当前窗口.前面可加参数/负参数,以指定左侧/右侧窗口的宽度(以列为单位). (新窗口内容为当前窗口内容的副本)
  C-x-o   : 遍历窗口.

  C-x,4,0 : 关闭当前窗口及缓冲区.
  C-x,4,b/C-o : 在另一窗口中打开并选中/不选中指定buffer.
  C-x,4,r/f : 以只读方式/在另一窗口中打开文件,并将其选中.
  C-x,4,d : 在另一窗口中打开Dired,并将其选中.
  C-x,4,m : 在另一窗口中打开邮件编辑界面,类似于"C-x,m".
  C-x,4,. : 在tag table中查找某tag信息,并在另一窗口中显示,类似于"M-.".

  变量: window-min-height/window-min-width : 规定一个窗口的最小高度/宽度, 默认为4/10.
  C-x,{/} : 使当前窗口宽度缩小/增加一列.前面可加参数,表示调整量.
  C-x,^   : 使当前窗口高度增加一行.前面可加参数,表示调整量,负参数表示降低高度.
  C-x,+   : 平衡所有窗口的高度.
  C-x,-   : 将当前活动窗口的高度降低到对于它所包含的缓冲区来说可能的最小尺寸.

  winner-mode 将记住对窗口/框架的改动.
  C-c,left : winner-undo,撤销最后一次对窗口布局的更改. (已绑定到"C-x,4,u")
  C-c,right: winner-redo,恢复到最近一次对窗口布局的更改.(已绑定到"C-x,4,r")

* 框架(21)

   C-x,5,2     : 生成一个新的框架.
   C-x,5,b/f/r : 在另一框架中打开buffer/文件/以只读方式打开文件,并将其选中.(如果不存在其他框架则新建一个框架)
   C-x,5,o     : 在框架间切换.
   C-x,5,0/1   : 关闭/仅保留当前框架.
   C-x,5,d : 在新框架中打开Dired.
   C-x,5,m : 在另一个框架中打开邮件系统.
   C-x,5,. : 在另一个框架中查找指定tag.
   C-z : 最小化当前框架.

* 光标移动
  
  C-f/b : 光标前进/后退一个字符.
  M-f/b : 光标前进/后退一个单词 (单词被定义为连续的"字母"或"数字").
  C-n/p : 光标移动到下/上一行 (一般情况垂直移动光标, 如果下/上一行比当前光标所在的列短，光标将移到新行的末尾).
  C/M-v : 向下/上翻页. 前边可加参数表示滚动几行.
  C-M-v / C-M-S-v : 对另一窗口向下/上翻页.
  C-a/e : 光标移动到行首/尾.
  M-m   : 光标移动到所在行第一个非空白字符处.
  M-a/e : 光标移动到句首/尾 (句子被定义为由标点, 回车, 两个以上空格分割的部分).
  M-{/} : 光标移动到当前段落首/尾.
  M-</> : 光标移动到缓冲区首/尾.前缀参数N(N在1到10之间),表示跳转到buffer的N0%处.
  C-x,[ / ] : 光标移动到上/下一个分页符处.
  C-x,</> : 屏幕整体向左/右移动一屏.
  C-l/ll/lll : 使当前行位于屏幕中/首/尾行.
  C-M-l : 启发式地将有用的信息显示到屏幕中间.
  M-r/rr/rrr : 光标移动到屏幕中间/首/尾行.
  M-g,c [数字] : 光标移动到整个buffer的第[数字]个字符.
  M-g-g [行号] : 光标移动到指定行首.
  M-g,TAB [列号] : 光标移动到当前行的第[列号]列,从第0列开始.

  M-x,scroll-down/up-line: 向下/上翻页一行.
  
* 剪切,删除,粘贴
  注: 当在图形界面下使用,emacs中的剪切与复制命令会将内容发送到系统剪切板.
** 剪切

  注: 连续的剪切命令所剪切的内容将合并为kill-ring中的一个记录; 可以用"C-M-w"命令强制加入.
  "kill-ring"为所有buffer所共享.
  kill-ring-max : 设置kill-ring中保存的最大项数.
  在只读buffer中的剪切实际上相当于复制.

  M-d/Backspacne : 剪切光标右/左一个单词.
  M-k/C-x,Backspace : 剪切光标右/左一句.前面可加参数,表示剪切多少句,0参数表示剪切光标左一句.
  C-k : 剪切光标起到行末部分(不包括换行符).前面可加参数,表示剪切多少行,0参数表示剪切光标左到行首部分.
  C-S-Backspace : 剪切整个当前行,包括换行符(无论光标在何位置).
  C-M-k : 剪切平衡表达式.
  C/M-w : 剪切/复制选中的区域.若没选中区域则剪切/复制从当前光标处到最后一次设置的标记处之间的内容.
  M-z [字符] : 剪切从光标起到指定字符处(包含指定字符).参数表示删除到第几个指定字符,负参数表示向左删除.
  C-M-w : 强制(紧跟着的)剪切命令的内容合并到kill-ring最后一项,可用于将多个分散的文本片段合并成一个.

** 删除
   C-d : 删除光标下字符.
   M-\ : 删除光标周围空白字符.
   M-SPC : 同上, 但保留一个空白符.
   C-x-o : 若当前行为空白行,则删除之；否则, 删除当前行后所有空白行(如果有).
   M-x,delete-duplicate-lines : 删除所选区域内的重复行,保留第一处出现."C-u":保留最后一处出现."C-u-u":仅删除相邻重复行."C-u-u-u":保留重复的空白行.

** 粘贴
  C-y : 粘贴最近被剪切的块,光标移动到粘贴部分末尾,并在光标初始位置设置标记.加参数表示粘贴键切环中第几项,"1"代表最近一项.
  C-u-y : 功能同上,光标位置不变,在粘贴部分的末尾设置标记.
  M-y : 向前遍历剪切环中的内容(紧跟在"C-y"后面使用)
  
** 其他命令

   M-x,append-to-buffer : 将所选区域内容插入到指定buffer的光标处,光标移动到插入部分末尾.
   M-x,prepend-to-buffer : 将所选区域内容插入到指定buffer的光标处,光标移动到插入部分头.
   M-x,copy-to-buffer : 将所选区域内容复制到指定buffer,该buffer中的原有内容将被清除.
   M-x,insert-buffer : 将指定buffer的所有内容插入到当前buffer的光标处,并在插入内容末尾设置标记.
   M-x,append-to-file : 将选中区域的内容直接添加到(写入磁盘)指定文件的末尾(该文件不能被emacs打开,否则会引起冲突).

* 标记和选择区域

  注: 在用"C-y"粘贴后,可利用"C-u-SPC"回到粘贴前光标起始处.
  可用"shift+光标移动"命令可以选择区域.

  C-SPC : 在光标处设置标记,并将其激活.(一个缓冲区可以设置16个标记,组成标记环)
  C-SPC-SPC : 在光标处设置标记,但不激活,同时激活transient-mark-mode.(可用于将当前位置保存在标记环中随后返回)
  C-x-SPC : 遍历全局标记环.(注:每设置一个标记都将其及其buffer加入全局标记环)
  C-u-SPC : 遍历标记环中的标记.
  C-x-x : 交换光标当前位置和标记起点.
  M-@ : 选择光标起一个单词.(重复执行,将连续向右选择,可加（负）参数)
  C-M-SPC : 选择平衡表达式(包括左右括号).可加正负参数.
  M-h : 选择光标所在段落,标记处于段落尾,光标在段落首. (重复执行，将连续向下选择)
  C-x-p : 选择当前页.
  C-x,h : 选择全部缓冲区,标记在缓冲区末尾,光标在缓冲区首.
  
  transient-mark-mode : 切换是否高亮所选区域.
  delete-selection-mode : 选中某区域后,在插入文本将删除选中区域.
  shift-select-mode : 切换Shift选择区域模式.

  mark-ring-max : 设置标记环的最大长度,默认为16.
  global-mark-ring-max : 设置全局标记环的最大长度,默认为16.
  set-mark-command-repeat-pop : 当设置为non-'nil'时, 在使用过"C-u-SPC"后可用"C-SPC"代替.

* 隐藏区域

  C-x,n,n : 仅使被选择区域可见,其它区域不可见,用于仅对当前区域执行特定操作.
  C-x,n,p : 仅使当前页(page)可见.
  C-x,n,d : 仅使当前defun可见.
  C-x,n,w : 恢复整个buffer可见.

* 正则表达式
   
  M-x, re-builder: 启动正则编辑环境.

** 重复次数 : 以下操作符自身不是表达式的组成部分,作为后缀操作符,表示将其前导表达式重复的若干次.它总是作用于'最小的'可能前导表达式.
** 特殊字符
   '.' : 匹配除换行符以外的任意一个字符. (例如: 'a.b')
   '*' : 匹配(最小)前导正则表达式任意多次(0次或多次). (例如:'ca*r': 'cr','car','caaar',...)
   '+' : 匹配(最小)前导正则表达式至少一次(1次或多次).(例如: 'ca+r': 'car','caar','caaar',...)
   '?' : 匹配(最小)前导正则表达式0次或1次.(例如: 'ca?r': 'cr', 'car')
   '*? ', '+?', '??' : 是以上三个操作符的非贪心版本,它们尽可能匹配少的字符. 
   '\{n\}' : 重复恰好n次. (例如: 'x\{4\}': 'xxxx')
   '\{n,m\}' : 重复至少n次,但不超过m次,即在区间[n,m]内. (例如: '\{0,1\}'等价于'?','\{0,\}'等价于'*','\{1,\}'等价于'+')
   
   '^' : 仅匹配行首的空串. 所以'^foo'仅匹配出现在行首的'foo'. (仅当'^'仅位于正则表达式首,或跟在'\('及'\|'后时,才具有这种功能.)
   '$' : 仅匹配行尾的空串. 所以'x+$' 仅匹配出现在行尾的一个或多个'x'.(仅当'$'仅位于正则表达式尾,或在'\)'及'\|'之前时,才具有这种功能.)
   
  '[字符集]': 表示匹配字符集中的任意一个字符.(例如: '[ab]*': 任意由'a','b'字符组成的序列,包括空串).
  字符集可以是一个范围, 如: '[a-z$%.]'表示匹配小写字母的集合, 及'$', '%', '.'. 当搜索是大小写敏感时, 范围的起始和终止必须都是大写,小写,或非字母字符,混合使用大小写将导致错误.
  字符集也可以是字符类,如: [:alnum:], [:alpha:], [:digit:], [:lower:], [:upper:]等,更多请查看(Char Classes).
  注: 要包括']'字符,必须将其放在字符集的第一个位置.如[]a],将匹配']'和'a'.
  要包括'-'字符,必须将其放在字符集的第一/最后一个位置,或放在一个范围的后面. 如[]-],将匹配']'和'-'.
  
   '[^字符集]': 表示匹配除字符集以外的任意(一个)字符,包括换行符. 例如'[^a-zA-Z0-9]',将匹配除了字母和数字以外的任意字符.
   要包括'^'字符,只需将其置于除第一个位置以外的任意位置.

** 字符类

   [:ascii:] : 任意ASCII字符.
   [:nonascii:] : 任意非ASCII字符.
   [:alpha:] : 任意字母.
   [:alnum:] : 任意字母和数字.
   [:blank:] : 空格和制表符.
   [:space:] : 空白字符.
   [:cntrl:] : ASCII控制字符.
   [:digit:] : 0~9.
   [:lower:] : 小写字符.
   [:upper:] : 大写字符.
   [:punct:] : 标点字符.
   
   [:word:] : 任意具有单词语法(在syntax class table中定义)的字符.
   [:xdigit:] : 任意十六进制字符(0~9, a~f, A~F).

   [:unibyte:] : 任意单字节字符.
   [:multibyte:] : 任意多字节字符.

   [:print:] : 任意ASCII字符, 除了:控制字符, 回退符(delete character).
   [:graph:] : 任意ASCII字符, 除了:控制字符, 空格, 回退符(delete character).

** 反斜杠

   '\' : 可以转义特殊字符,如: '\$','\['等.(但是无法转义'-'和']'.)
   '\|' : 两个正则表达式的'or', 将作用两边最长的可能的正则表达式. (例如: 'foo\|bar': 'foo'或'bar')
   '\(...\)' : 用于将正则表达式分组, 限制其范围. '\(foo|\bar\)x': 'foox'或'barx'. 'ba\(na\)*': 'ba', 'ban', 'banana',...
   '\(?:...\)' : 这个分组不记录匹配的子串, 不能用'\D'来引用.
   '\D' : 匹配和结构'\(...\)'第D次出现时所匹的同样的文本.
   '\`' / '\'' : 匹配空串,但是仅在字符串或缓冲区的开始/结尾处.
   '\=' : 匹配空串,但是仅在光标(point)处.
   '\b' / '\B' : 匹配空串,但是仅/不在单词(word)的开始或结尾处. ('\bfoo\b' : 仅匹配单词独立的'foo'. '\bballs?\b' : 仅能匹配独立的'ball'或'balls')
   '\<' / '\>' : 匹配空串,但是仅在单词的开始/结尾处.
   '\w' / '\W' : 匹配任何(/非)构成单词的字符.(由语法表决定这些字符是什么)
   '\_<' / '\_>' : 匹配空串,但是仅在符号(symbol)开始/结尾处. symbol: 由'\w'和'_'构成的字符序列.
   '\sC' / '\SC': 匹配任意(/不)符合语法'C'的字符. C: 'w'(组成单词), '-'或' '(空白符)
   '\cC' / '\CC' : 匹配任意(/不)属于字符类'C'的字符. 用'M-x, describe-categories' 来查看字符类.

* 查找和替换
** 查找
  
  换行符可用"C-j"输入. 可用"C-u,SPC" 使光标返回到开始搜索前的位置.
  除正则查找外,默认情况下,输入字符串中的空白符将匹配buffer中一个或多个空白符.
  
*** 普通查找
  C-s/r : 从光标处起,正/反向增量查找.
  C-s/r,RET : 非增量查找.
  
*** 单词查找:
  查找时将忽略单词间的标点.
  M-s,w : 正向单词增量查找. 可以独立使用,也可以在"C-r/s"中切换为单词查找.
  M-s,w,Ret : 单词非增量查找.
  
  M-s,w,C-r : 反向单词增量查找.可以独立使用,也可以在"C-r/s"中切换为单词查找.
  M-s,w,C-r,RET : 反向单词非增量查找.

*** 符号查找
    
  M-s,_ : 正向符号增量查找. 可以独立使用,也可以在"C-r/s"中切换为符号查找.
  M-s,_,C-r : 反向符号增量查找.
  
  M-s,_,RET : 正向符号非增量查找. 
  M-s,_,C-r,RET : 反向符号非增量查找. 

*** 正则查找
    C-M-s/r; C-u-s/r; 在"C-s/r"中使用"M-r"切换 : 正/反向正则增量查找.
    C-M-s/r,RET: 正/反正则非增量查找.
    注：正反向正则搜索并不对称.

*** 在启动搜索后：
  C-s/r : 寻找下/上一个匹配处.   
  M-n/p : 调出搜索历史.(见"search-ring"变量)
  M-c: 切换当次查找是否大小写敏感,默认为不敏感. (若输入字符串均为小写,则大小写不敏感,若存在一个大写字母,则大小写敏感.)
  M-s,SPC : 输入字符串中的一个空白符只匹配buffer中的一个空白字符(默认可以匹配多个).见"search-whitespace-regexp"变量.
  M-s,i : 切换是否搜索不可见字符.
  
  M-% : 将待搜索的字符串替换为别的字符串.
  C-w : 将光标起一个单词复制到查找区,可以连续使用.(可以用来显示当前光标处的单词在该buffer中的所有出现)
  C-M-y : 将光标所在字符复制到查找区.(可连续向右复制)
  C-M-w : 删除查找区域最后一个字符.(可连续向左删除)
  M-s,C-e : 将当前光标位置到行尾的部分复制到查找区.
  C-y : 将最后一次剪切的内容复制到查找区.
  M-y : 将kill-ring中的内容复制到查找区.
  C-g : 可以用来在minibuf中清除所有匹配失败的输入字符.

  "isearch-complete" 可以设置搜索补全的快捷键.
  
  可以用: (put '函数名 'isearch-scroll t) 使指定函数可以在搜索过程当中使用.
  
*** 多buffer查找
    M-x,multi-isearch-buffers : 在多个buffer中执行增量查找.(需要先输入多个buffer名)
    M-x,multi-isearch-buffers-regexp : 同上.进行增量正则查找.

*** 其它
    M-x,occur,[regexp] : 在另一个窗口中列出当前buffer中匹配regexp的每一行.用于将匹配的部分集中起来显示.
    M-s,o : 再一次occur命令,用使用最近的regexp.
    M-x,-occur,[regexp] : 多buffer的occur.
    M-x,multi-occur-in-matching-buffers : 类似于multi-occur,只是代查找的buffer由正则表达式来指定.
    M-x,how-many,[regexp] : 显示光标后f的buffer内容匹配regexp的数量(不高亮匹配处).
    M-x,flush-lines,[regexp] : 删除光标后所有匹配regexp的行(可对region使用).
    M-x,keep-lines,[regexp] : 删除光标后所有不匹配regexp的行(可对region使用).

** 替换
   当选中某一区域后,替换仅对该区域有效.
   可用"C-u,SPC" 使光标返回到开始替换的位置.
   C-x,ESC,ESC,RET : 在当前处,重新执行上次的替换命令.

*** 普通替换
   M-% : 从光标起,进行正向查询替换."C-u -"前缀代表反向替换.
   M-x, replace-string : 从光标起,进行正向无条件替换."C-u -"前缀代表反向替换.

*** 正则替换
    M-x,replace-regexp [regexp] [newstring] : 从光标起,进行正向正则无条件替换."C-u -"前缀代表反向替换.
    C-M-% [regexp] [newstring]: 从光标起,进行正向正则查询替换."C-u -"前缀代表反向替换.

    newstring中可以包含:
    \& : 代表匹配到regexp的整个串. 若regexp: c[ad]+r, newstring: \&-safe,则cadr -> cardr-safe; cddr -> cddr-safe.
    \D : D是一个数字,代表regexp中第D个group.用于截取regexp的一部分. 若regexp: \(c[ad]+r\)-safe, newstring: \1, 则执行上面替换过程的逆过程.
    \# : 当前替换是第几次替换(从0开始). 
    \? : 每次由用户输入的内容.
  
*** 询问选项:
   y/SPC : 替换当前匹配项,并转到下一匹配处.
   n/DEL : 忽略当前匹配项,并转到下一匹配处.
   , : 替换当前匹配项后停止,等待后续选项.
   . : 替换当前匹配项,并退出.
   ! : 替换所有剩余匹配项,不在询问.
   Y : 替换所有剩余buffer中的所有剩余匹配项,不在询问.(用于multi-buffer replacements)
   N : 忽略当前buffer中的剩余匹配项,直接转到下一buffer.(用于multi-buffer replacements)
   ^ : 回到上一替换处.
   q/RET : 直接退出.
   e : 修改替换字符串,从当前匹配处起生效.
   C-r : 进入递归编辑状态.
   C-w : 删除当前匹配项,并进入递归编辑状态.
   C-M-c : 退出递归编辑状态,转到下一匹配处.
   C-] : 退出递归编辑状态，同时退出查找.

* 矩形操作

  注：矩形区块没有所谓的"kill-ring",复制/剪切操作仅保留最后一次复制/剪切的内容.

  C-x,r,k/d : 剪切/删除所选矩形块.其右侧文本将自动填补空缺.
  C-x,r,M-w : 复制所选矩形区块.
  C-x,r,y   : 粘贴最近一次被剪切/复制的矩形块,矩形块的左上角将位于当前光标处.
  
  C-x,r,c   : 用空格字符替换所选矩形区域中的所有字符.
  C-x,r,o   : 将空格字符插入到所选矩形区域,原有内容将向右平移.

  C-x,r,t,[字符串]   : 用指定字符串替换将所选矩形区域的每一行.
  M-x,string-insert-rectangle : 将指定字符串插入到所选区域的每一行,原有内容将向右平移.

  C-x,SPC : 设置矩形区块起始标记,高亮部分将以矩形的形式选择.
  C-x,r,N   : 将所选矩形区域的每一行内容用其行号(所在矩形区域的第几行)替换,行号从1开始.
  M-x,delete-whitespace-rectangle :  deletes horizontal whitespace
 starting from a particular column.  This applies to each of the lines
 in the rectangle, and the column is specified by the left edge of the
 rectangle.  The right edge of the rectangle does not make any
 difference to this command.

* 键盘宏

  注: minibuffer中的键入也将被录入宏.

  C-g: 退出键盘宏录制.
  F3/C-x,( : 开始录制键盘宏.
  F4 : 如果正在录制键盘宏,则结束录制(同"C-x,)"); 否则,执行最近执行过的键盘宏.
  C-u,n,C-x,) : 结束当前宏录制,并立即执行n-1遍.
  C-x,e : 结束当前键盘宏录制,并立即执行该宏,此后连续按"e"便可重复执行该宏.
  C-u,F3 : 执行最近执行过的键盘宏,并向其附加操作.
  C-u-u,F3 : 对最近执行过的键盘宏符加操作,但不执行它.
  C-x-k,r : 从选中区域的每一行的开头,执行最近执行过的键盘宏.

  F3 : 插入该宏当前被执行的次数,例如:"<F3> C-a <F3> . <SPC> <F4>".
  C-x-k-i : 插入键盘宏环当前宏的执行次数.  

  所有定义的键盘宏,都被记录在"键盘宏环"里,被所有buffer共享.
  C-x-k-k : 执行键盘宏环上,当前所在的宏.可以用于终止宏录制,并立即执行它(执行时只需"C-k").
  C-x-k-n/p : 轮转到键盘宏环的下/上一个键盘宏.(轮转时只需"C-n/p")
  
* 格式化
  
** 缩进 (24)

   C-j/o : 光标起插入新的一行,光标下移/不动.
   C-M-o : 将当前行光标及以后部分,平移到下一行,光标位置不动.
   C-M-\ : 缩进所选区域的每一行.
   M-^ : 将当行拼接到上一行末尾, 仅间隔一个空格符. ("C-u"前缀将下一行拼接到当前行尾).
   C-x-i : 对选中区域缩进, 指定参数表示向右缩进几个字符,负参数表示向左缩进.如果不指定参数,需要用方向键调节缩进量.
   C-u,N,C-X,$ : 隐藏当前buffer中,缩进大于等于N列的行. 若无参数则全部显示.
   M-i : 将光标处及以后部分,向后缩进到下一个tab stop处.
   C-x,<TAB> : 对选中区域进行缩进微调:<LEFT>/<RIGHT>, 向左/右缩进一个空白; S-<LEFT>/S-<RIGHT>, 向左/右缩进到下一个tab stop. "C-u,+/-N"表示向右/左缩进N个空格.
   
   M-x,edit-tab-stops : 编辑tab stop.(24.2)
   变量:tab-always-indent : 改变tab的行为.
   
** 填充(25)  
  
   M-q : 填充当前段落(或所选区域).
   M-x,fill-region : 填充所选区域中的每个段落.
   M-x,fill-region-as-paragraph : 将所选区域视为一个段落,进行填充.
  
   C-x,f : 设置当前buffer的fill-column(最大折行宽度).
   M-o-s : 将当前行居中.

   前缀填充(25.5.3) : 在每一行前面加上特定的前缀字符串.


** 空白符

  M-x,delete-trailing-whitespace: 删除行尾空白字符,及buffer底部的空行,若选中区域,则仅对该区域执行.(若"delete-trailing-lines"设置为'nil'则不删除底部的空行.)
  M-x,whitespace-mode: 让当前缓冲区中的空白字符变得可见.
  show-trailing-whitespace: 设为't‘ 则显示当前buffer中的空白字符.

** 折行

   M-x,toggle-truncate-lines: 打开/关闭折行.  truncate-lines : 为nil则
   折行; 否则断行.  truncate-partial-width-windows: 设定窗口宽度, 小于
   此宽度时,则折行.

* 缩写

  注: 局部缩写(l)仅适用于和定义时主模式相同的缓冲区.

  C-x,a,l/g : 为光标前一个单词指定局部/全局缩写.数字前缀N表示为光标前N
  个单词指定缩写.数字前缀0表示为所选区域定义缩写.负前缀(C-u,-) 将清除
  当前定义.

  C-x,a,i,l/g : 为光标前一个单词指定局部/全局全称.数字前缀表示为光标前
  多少个单词指定全程. 数字前缀0表示为所选区域指定全称. 负前缀(C-u,-)
  将清除当前定义.

  M-': 允许向缩写附加前缀. 例如: 'cnst' 代表 'construct', 先输入're',
  再输入M-', 再输入cnst, 再输入空格或标点, 则最后展开为'reconstruct'.
  
  M-/: 补全光标前部分, 每次执行'M-/'给出一个后选项. 搜索顺序为: 当前
  buffer光标前内容, 当前buffer光标后内容, 其他buffer. 键入'<SPC> M-/'
  可以继续补全候选内容之后的内容. 补全默认忽略大小写,变
  量'dabbrev-case-fold-search'为t时忽略大小写; 为nil时, 大小写起作用.
  详见emacs 29.7.
  
  C-M-/: 功能同上. 只是一次性给出补全列表,而非一次一个.

  C-x,a,e : 将光标前的缩写展开成全称.(如果已定义)
  M-x,expand-region-abbrevs: 展开所选区域内的所有缩写.

  M-x,define-global-abbrev <RET> ABBREV <RET> EXP <RET>: 为缩写ABBREV
  定义扩展EXP(全局).
  
  M-x,define-mode-abbrev <RET> ABBREV <RET> EXP <RET>: 为缩写ABBREV
  定义扩展EXP(局部).

  M-x,list-abbrevs : 查看(各mode下)所定义的缩写列表.
  M-x,edit-abbrevs : 编辑所有缩写.
  M-x,kill-all-abbrevs : 清除所有已定义的缩写.
  
  系统默认的缩写文件由变量'abbrev-file-name'定义, 其默认值为: "~/.emacs.d/abbrev_defs".
  M-x,write-abbrev-file: 将已定义的缩写保存到指定文件.
  M-x,read-abbrev-file: 载入指定保存有缩写定义的文件.
  
  M-x,insert-abbrevs: 将所有定义的缩写插入到当前光标处.
  M-x,define-abbrevs: 解析当前buffer, 载入所有定义的缩写.

* 交换位置
  
  C-t : 交换光标前后两个字符.当光标在行尾时,交换光标前两个字符.
  M-t : 交换光标前后两个单词.单词间隔中的标点符号位置不变.
  C-M-t : 交换光标前后两个(平衡)表达式.
  C-x-t : 交换光标所在行和上一行.

  注: 数字前缀"C-u,n",表示将光标前一个单位(字符,单词,表达式,行),连续向后交换n次.
  当n为0时,将交换光标后的单位和mark后的单位.
  
* 大小写转换

  M-l/u/c : 将光标后一个单词置为小写/大写/首字母大写. 加上参数/负参数,表示对光标后/前n个单词执行大小写转换.
  C-x-l/u : 将所选区域的改变为小/大写.

* 寄存器和书签

** 寄存器

  注：寄存器名是单字符的字母(区分大小写)或数字.
  寄存器中的内容不会消失,直到被新的内容替代.

  C-x,r,SPC,[寄存器] : 将当前光标的位置保存在指定寄存器中.
  C-x,r,j,[寄存器] : 跳转至指定寄存器所保存的光标位置.若寄存器中保存的是frame状态,则恢复该frame状态,加"C-u"将删除其它frame.
  
  C-x,r,s,[寄存器] : 将所选择的区域保存在指定寄存器中.加"C-u",将同时删除所选区域的文本.
  C-x,r,r,[寄存器] : 将所选择的矩形区块保存在指定寄存器中.
  C-x,r,i,[寄存器] : 插入指定寄存器中所保存内容(文本,矩形块,数字,光标位置)等插入当前光标处.
  C-x,r,+,[寄存器] : 将所选追加到指定寄存器末尾.
  
  保存数字:
  C-u,[数字],C-x,r,n,[寄存器] : 将数字保存在指定寄存器中.(无参数则保存0)
  C-u,[增量],C-x,+,n,[寄存器] : 将增量累加到指定寄存器存保存的数字中.(无参数则增加1)

  保存frame窗口布局: 
  C-x,r/f,w,[寄存器] : 将当前/所有frame中窗口的状态保存在指定寄存器中. 
  用"C-x,r,j,[寄存器]"恢复指定frame布局.

  保存文件名:
  (set-register [寄存器] '(file . [文件名]))
  例如: (set-register ?z '(file . "/gd/gnu/emacs/19.0/src/ChangeLog")) 将文件名保存到寄存器"z"中.
  用"C-x,r,j,[寄存器]" 插入文件名.

  保存键盘宏:
  C-x-k,x,[寄存器] : 将最后一次键盘宏保存在指定寄存器中.
  用"C-x,r,j,[寄存器]" 执行该宏.

  M-x,append/prepend-to-register : 将所选内容追加到指定寄存器内容的末尾/开头.加"C-u",将同时删除所选区域的文本.
  M-x,view-register [寄存器] : 查看指定寄存器中的内容.

** 书签

  注:书签名可以包含多个字符,默认为当前缓冲区名.书签比寄存器的持续时间长久,一直存在直到被删除.
  书签文件(默认)位于: ~/.emacs.d/bookmarks 中.可用'bookmark-default-file'变量进行修改.
   
  C-x,r,m,[书签] : 将正访问文件的当前光标位置保存为指定书签.(将替换该书签原来的内容,如果有的话)
  C-x,r,b,[书签] : 跳转至指定书签.
  C-x,r,l : 列出所有书签.可对其进行编辑(用"C-h,m"查看编辑命令).

  M-x,bookmark-delete [书签] :删除指定书签.
  M-x,bookmark-save : 显式保存所有改动过的书签.
  M-x,bookmark-load [文件]: 载入指定书签文件.
  M-x,bookmark-write [文件]: 将当前所有书签写入到指定文件中.
  M-x,bookmark-insert-location [书签]: 在当前光标处,插入指定书签所在的文件名.
  M-x bookmark-insert [书签]: 在当前光标处,插入指定书签所在的文件的全部内容.

* Minibuffer

** 变量  

  minibuffer-electric-default-mode :Emacs hides the default argument as soon as you modify the contents of
  the minibuffer (since typing <RET> would no longer submit that
  default).
  minibuffer-eldef-shorten-default' to a non-`nil' value, the
  default argument is displayed as `[DEFAULT]' instead of `(default
  DEFAULT)'
  default-directory: 基于buffer的局部变量,默认为该buffer所关联文件所在的目录,用于在当前buffer下打开文件时指定默认目录. M-x,pwd: 查看该变量. M-x,cd [新目录]: 更改该变量为[新目录].
  insert-default-directory : 为空时,minibuffer中将不显示默认目录.(但输入的文件名,仍然基于默认路径)
  history-delete-duplicates : non-'nil'时,将在命令历史中去除掉重复的命令.
  history-length : 最大命令历史记录数.为't'时,将无限制.

** 命令  

  <TAB>/<SPC>/? : 尽可能补全/补全一个单词/显示补全列表.
  M-v : 切换到补全列表.(然后用<LEFT>/<RIGHT>选择补全项)
  在输入文件名时,无需清除默认目录,可在默认目录后直接输入'/'或'~'.当有存在'//'时,emacs将忽略第二个斜杠之前的所有部分.也忽略'~'之前的部分.
  可用"C-x,o" 在minibuer和其他窗口中切换,及进行数据交换.
  <RET>用于提交命令,C-o用于换行.
  M-p/n : 调出历史命令
  M-r/s [正则表达式] : 使用正则表达式查找历史命令.
  C-x,ESC,ESC : 快速调出最后一次在minibuffer执行过的命令.
  M-x,list-command-history : 列出整个命令历史记录.
  在minibuffer中输入密码时,"C-u"用于重新输入.

   
* 常见变量("C-h,v"查看)
  
  kill-ring      : 查看剪切环.
  history-length : 保存的历史命令的最大个数.
  fill-column    : 自动换行的长度.
  font-lock-maximum-decoration : 语法识别的等级.
  *-font-lock-extra-types : 对某种语言(*)所识别的类型.
  line-move-visual : 如果为nil,则按照'逻辑行'来移动上下行;否则按照'屏幕'行来移动.
  require-final-newline : 控制是否在文件尾添加空白行.

* 包管理器
  
  当安装某个特定包时,该包所依赖的其他包(如果没被安装)也将被安装.
  
  M-x,list-packages : 列出所有扩展包. 
  
  可用选项:
  'n/p': 移动到下/上一个包.
  '<RET>': 显示当前包的相关信息.
  'i': 将当前包标记为待安装.
  'd': 将当前包标记为待删除.
  'u': 删除当前包的标记.
  'U': 标记所有可升级的包.
  'x': 对所有被标记的包,执行相应的命令.
  'r': 刷新包列表.
  'f': 根据指定关键词过滤包.('q'恢复所有列表)
  'h': 显示以上选项.

  C-h,P : 显示某个已安装包的相关信息.

* 浏览URL

  M-x, browse-url <RET> URL <RET> : 在浏览器中打开指定URL. 若光标处为
  URL,则默认打开光标处URL.

  


* 其它
  
  临时文件:#file-name#为临时文件,如果当前缓冲区内容发生变化(且尚未保存),emacs就会自动将其保存为临时文件,一旦缓冲区内容写入磁盘(C-x-s),临时文件将被自动删除.
  1.替换^M: 用replace-string命令将^M(C-q-m)替换成空字符(直接回车）
  "C-c"前缀调用当前模式特有的命令
  C-x,= : 显示当前光标位置.
  M-x,whitespace-mode : 让当前缓冲区中的空白字符变得可见.
  M-x,calc : emacs计算器.
  
  C-x,RET,f : 改变文件编码.一般选utf-8-unix,用于将DOS格式转为Unix格式.
  
  M-x,normal-mode : 恢复当前buffer的主要模式.

* info系统使用

** 基本

  Space/Backspace : 下/上一页
  p/n : 同级前/后一节点. (兄弟节点)
  [/] : 顺序前/后一节点. (深度遍历节点)
  b/e : 跳转到节首/尾
  ? : 查看命令帮助
  m 子节点名 : 调转到指定孩子节点. 加"C-u"前缀,则在新的buffer和窗口中打开.
  u : 跳转到上级（父）节点
  M-x,visible-mode : 查看被隐藏的内容
  Tab / S-Tab : 遍历当前节点中的子节点和交叉引用
  f 交叉引用节点 : 跳转到指定的交叉引用处
  f ? : 列出该节点内的所有交叉引用
  l/r : 浏览历史中的前/后一个节点.
  L : 显示浏览历史.
  d : 回到Info系统总目录
  t : 回到当前话题的根结点
  q : 退出info系统

** 高级

   s,[字符串] : 在当前节点中查找字符串.
   i [关键词] : 查找包含指定关键词的索引项.','用于遍历所找到的索引项.
   I [关键词] : 功能同上.用一个虚拟节点, 列出所有找到的索引项.
   M-x,info-apropos [关键词] : 列出本机中所有包含该关键词的info文档索引.(常用)
   g (文档名)节点名 : 跳转到指定文档中的特定节点.若该结点和当前节点在同一份文档中,则无需加文档名.加"C-u"前缀,则在新的buffer和窗口中打开.
   1-9 : 通过编号来选择当前进入menu的节点.
   M-n : 将当前buffer的内容,在新的buffer和窗口中打开.
   M-x, info-display-manual : 打开指定的manual.

* 常用mode

  visual-line-mode : 对于非常长的行,将自动在单词分割处折行.光标移动命令将依据屏幕行而非逻辑行.
  toggle-truncate-lines: 超出屏幕边缘是否换行.
  size-indication-mode : 自动显示buffer大小.
  CUA-mode : 启动cua-mode.
  follow-mode     : 使两个窗口分别显示缓冲区中不同但又彼此相连的部分.
  scroll-all-mode : 使所有打开相同缓冲区的窗口保持同步移动.
  compare-windows : 将当前窗口与下一个窗口进行比较,在两个窗口中从光标处开始比较,并在两个缓冲区中将光标移动到第一个不同的字符处,直到到达缓冲区的末尾为止。

** view-mode
   M-x,view-mode: 用于只读状态浏览当前buffer,不能对其进行编辑.
   SPC/Backspace: 向下/上翻页.
   s: 增量搜索.
   q: 退出view-mode, 返回到启动view-mode之前的buffer.
   e: 退出view-mode, 停留在当前buffer.
   M-x,view-buffer,[buffer]: 用view-mode浏览指定buffer.
   M-x,view-file,[file]: 用view-mode浏览指定文件.

* 编译
  注: compilation-skip-threshold变量控制以下命令的跳转级别.(为1时,跳转到waring;为2时,仅跳转到error)
  M-g-n/p : 跳转到源代码的下/上一个出错信息处(可在任意buffer内执行).
  M-n/p : 跳转到*compilation* buffer的下/上一个出错信息处.
  M-{/} : 跳转到上/下一个不同源文件的最后/第一个出错信息处.
  
  C-c-f : next-error-follow-mode(在compilation buffer中移动光标到出错信息处,相应的源文件中的错误将会跟随显示)
  
  <SPC>/<Backspace> : 在compilation buffer中向下/上翻一页.
  
  M-x,compilation-minor-mode

* 常用函数

  M-x,delete-trailing-whitespace : 删除行尾空白符.

* cc-mode

  用于编写C/C++, Java, AWK程序. M-x,c-version : 查看版本

** hooks

   c-initialization-hook: 当cc-mode初始化时运行, 每个emacs-sesion只运
   行一次.用于设置键绑定.
   c-mode-common-hook : cc-mode的主hook, 跨语言, 在特定语言hook前运行.
   c-mode-hook : c语言环境hook.


** Minor modes

   ‘C-c C-l’ (‘c-toggle-electric-state’)
   Toggle electric minor mode.  When the command turns the mode off,
   it also suppresses auto-newline mode.
   
   ‘C-c C-a’ (‘c-toggle-auto-newline’)
   Toggle auto-newline minor mode.  When the command turns the mode
   on, it also enables electric minor mode.
   
   ‘M-x c-toggle-hungry-state’(2)
   Toggle hungry-delete minor mode.
   
   ‘M-x c-toggle-auto-hungry-state’(3)
   Toggle both auto-newline and hungry delete minor modes.
   
   ‘C-c C-w’ (‘M-x subword-mode’)
   Toggle subword mode.
   
   ‘M-x c-toggle-syntactic-indentation’
   Toggle syntactic-indentation mode.

   mode-line:
   l: electric mode.
   a: auto-newline mode.
   h: hungry delete mode.
   w: subword mode.

** 缩进

   <TAB> : 缩进当前行.
   C-M-q : 缩进一个括号包裹的完整表达式,光标必须置于起始括号上.
   C-c-q : 缩进当前光标所在的函数(类, 宏定义).
   C-M-\ : 缩进所选择的区域.
   M-j : 在当前光标处断行并缩进.

** 光标移动
   
   C-M-a/e : 光标移动到函数(结构体)首/尾.可以连续移动,也可以加参数前缀.
   M-a/e : 光标移动到语句首/尾.可以连续移动,也可以加参数前缀.
   C-c-n/p : 移动到下/上一个条件编译语句块.

** Hungry Delete

   当hungry delete mode开启时:
   C-d : 前向hungry delete.
   <Backspace> : 后向hungry delete.

   无论hungry delete mode是否开启:
   C-c-d : 前向hungry delete.
   C-c-<Backspace> : 后向hungry delete.

** 选择

   C-M-h : 选中当前函数,重复使用可以连续选择下面的函数.
   
** 注释
   
   C-c-c : 注释所选区域. 
   C-u-c-c : 取消所选区域注释.
   M-; : 在当前行尾加上一条注释. 若前加"C-u", 则删除当前行的所有注释内容.
   
** 其它

   C-c-\ : 删除或添加所选区域末尾的反斜杠.用于多行宏编辑.

   C-c-e : 在另一个buffer内, 展开所选区域内的宏."C-u"前缀将在当前宏处
   直接展开.

** font lock
   
   变量'*-font-lock-extra-types'可以自定义语法高亮的类型.
   变量c-doc-comment-style: 用于设置文档注释的风格.



** style

   所有的style及其参数设置都保存在变量'c-style-alist'中.

   C-c,.(c-set-style) : 改变当前buffer的style.
   "c-default-style": 打开新buffer时设置的默认style.
   "c-indentation-style" : 该变量用于查看当前buffer的style.
   
   注：在.emacs配置文件中设置的变量, 将会覆盖style中的相同变量.
   
    In all cases, the style described in ‘c-default-style’ is
    installed _before_ the language hooks are run, so you can always
    override this setting by including an explicit call to
    ‘c-set-style’ in your language mode hook, or in
    ‘c-mode-common-hook’.


   
* shell mode
  
  <RET> : 将光标所在行作为输入,发送给shell.
  <TAB> : 补全命令或文件名.
  M-?   : 显示光标前文件名的候选补全列表.
  C-d   : 删除光标下字符或发送EOF(在shell buffer末尾执行)
  C-c,<SPC> : 在光标前插入新行,在键入<RET>后,新行前后的两行都将作为输入发送给sell.
  C-c,<RET> : 将光标所在行内容,整体复制到buffer尾(同时替换原有内容).
  C-c-a : 光标移动到当前行首(提示符后).
  C-c-u : 删除光标前最近一次输入的内容(光标当前处于shell buffer末尾).
  C-c-w : 删除光标前一个单词.
  C-c-c : 中断(interrupt)当前shell及其任务.(会清除shell buffer末尾尚未执行的命令)
  C-c-z : 暂停(stop)当前shell及其任务.(会清除shell buffer末尾尚未执行的命令)
  C-c-\ : 向shell及其任务发送quit信号.(会清除shell buffer末尾尚未执行的命令)
  C-c-o : 清除shell最近一次的输出结果.
  C-c-s : 将shell最近一次的输出结果写入(覆盖)指定文件."C-u"前缀表示追加.
  C-c-p/n : 跳转到上/下一个提示符处.
  C-c-r : 跳转到最后一次输出结果的起始处.
  C-c-e : 将shell buffer的末尾下拉到窗口底部.
  C-c-f/b : 在当前行内,向前/后跨越一个命令.
  
  M-n/p : 下/上一个shell历史命令.
  M-r   : 增量式正则搜索历史命令.(启动后可用"C-s/r"进行正/反向搜索)
  C-c-x : 取得下一条历史命令.
  C-c,. : 拷贝上一条命令的最后一个参数.("C-u,N"前缀,指定拷贝第N个参数.)
  C-c-l : 在另一窗口中显示历史命令列表.
  
  M-x,dirs : 显示shell的当前工作目录.
  M-x,send-invisible [文本]: 将[文本]作为输入发送给shell,但不显示该文本,常用于输入密码.
  M-x,comint-continue-subjob : 继续执行被挂起的shell命令.

* 拼写检查
  
  M-$ : 检查光标下(或选择区域中)单词的拼写,
  C-M-i : 使用辞典补全输入单词.
  M-x,ispell : 检查并纠正当前buffer内(或选择区域中)所有单词的拼写.
  M-x,ispell-buffer/region/message : 检查并纠正当前buffer/所选区域/信件草稿内所有单词的拼写.
  M-x,ispell-change-dictionary <RET> DICT <RET> : 为当前buffer的spell checker更换词典. 
  M-x,ispell-kill-ispell : 杀死Aspell/Ispell/Hunspell 子进程.
  M-x,flyspell-mode : 开启全屏检查模式.
  M-x,flyspell-prog-mode : 仅检查字符串和注释中的拼写.用于程序中的拼写检查.

  出错时的处理方式:
  '数字' : 选择相应编号的单词替换出错单词.
  '<SPC>' : 跳过该单词,仍保持其错误状态.
  'r' : 用一个新输入的单词替换当前拼写错误的单词.
  'R' : 用一个新输入的单词替换当前拼写错误的单词,并且会提示是否替换buffer中其它地方出现的类似拼写错误.
  'a' : 接受该错误并不再提示,仅在当前session中.
  'A' : 接受该错误并不再提示,仅在当前session,当前buffer中.
  'i' : 将单词插入到个人辞典中,以后将其视为正确的单词.
  'm' : 同'i',但可以指定个人辞典的完整信息.
  'u' : 向个人辞典中插入插入该单词的小写形式.
  'l [regexp]' : 在个人辞典中查找匹配regexp的单词,这些单词将作为新的候选单词.
  'X' : 退出并将光标保留在当前位置.
  'x' : 退出并将光标返回到拼写检查开始时的位置.
  'q' : 退出并杀死spell-checker.
  '?' : 显示选项列表.


* Ivy

** 控制变量
   
   'ivy-height' : 候选列表中项数(列表高度).默认为10.
  
** 在候选项列表中导航:
  
    C-n/p : 下/上一个候选项.
    M-</> : 第一个/最后一个后选项.
    C/M-v : 候选列表翻页.
  
    变量: ivy-wrap(决定是否候选列表循环滚动), ivy-height(候选项个数)

** 对选中项执行操作后退出会话, 用于对单一项执行操作.
   
   C-m/<RET> : 对选中项执行默认操作,
   M-o : 列出对选中项可用的操作列表.
   C-j : 对于目录, 将当前目录补全; 对于文件, 执行默认选项后退出.
   C-M-j : 使用'当前输入内容'而非'当前匹配项'提交.
   <TAB> : 尽可能补全当前项.按两下<TAB>相当于"C-j".
   C-' : 使用avy-mode选择候选项.

** 对选中项执行操作后不退出会话, 用于对多个项执行操作.
   
   C-M-m : 同"C-m",  执行完成后不关闭minibuffer.
   C-M-o : 同"M-o", 执行完成后不关闭minibuffer.
   C-M-n/p : 移动到下/上一项, 并对其执行默认操作, 执行完成后不关闭minibuffer.
   
** 调整输入行内容

   M-n/p : 调出下/上一个输入历史.
   M-i : 将当前候选项插入到输入行.
   M-j : 将主buffer中光标后单词插入到输入行,可连续插入.
   S-<SPC> : 清除当前输入内容.
   C-r : 搜索输入行历史.
   M-w : 将选中项拷贝到剪切环中.
   M-q : 切换是否允许正则表达式作为输入.

** 保存当前会话的内容到另一buffer中
   
   C-c-o : 将当前候选项保存到另一个只读buffer中, 并退出会话.
   在该buffer中, 可执行以下操作:
   j/k : 移动到下/上一行.
   a : 读取一个操作, 并对该buffer执行.
   o : 列出对当前选中项可执行的操作, 并对选中项执行.
   q :退出.

* Flycheck
  
  C-c,!,v : 检查Flycheck是否正确设置.(flycheck-verify-setup)
  C-c,!,c : 检查当前buffer的语法错误.(flycheck-buffer)
  C-c,!,n/p : 跳转到下/上一语法错误处.前面可加参数前缀.(注:亦可用标准的emacs错误导航'M-g,n/p')
  M-x,flycheck-first-error : 跳转到第一个语法错误处.
  C-c,!,l : 列出当前buffer内的所有语法错误信息.(flycheck-list-errors).
   'n/p' : 移动到上/下一个语法错误处.
   'f' : 过滤列表,仅显示错误级别高于指定阈值(由flycheck-error-list-minimum-level指定,默认显示全部错误)的错误.
   'F' : 移除所有过滤器.
   'q' : 退出,隐藏错误列表.
   'RET' : 跳转到当前错误处.
   'g' : 刷新列表.
   'S' : 按光标所在列的内容排序.
  C-c,!,? : 显示指定语法检查器的文档.(flycheck-describe-checker)
  C-c,!,s : 为当前buffer选择指定的语法检查器.(flycheck-select-checker) 'C-u'前缀将取消所有为当前buffer手动指定的语法检查器,改为系统自动选择.
  C-c,!,x : 指定语法检查器,使其在当前buffer中失效.(flycheck-disable-checker) 'C-u'前缀将恢复指定语法检查器.
  C-c,!,h : 显示当前光标下的语法错误信息.(flycheck-display-error-at-point)
  C-c,!,C-w : 将当前光标处的所有语法错误信息拷贝到剪切环.加'C-u'前缀将同时拷贝错误ID.

** Flycheck的mode line信息

   'FlyC'  : 当前buffer没有错误.
   'FlyC*' : Flycheck刚检查过当前buffer.
   'FlyC:3/5' : 当前buffer中有3个错误5个警告.
   'FlyC-' : Flycheck没有找到语法检查器.用'C-c,!,v'确认.
   'FlyC!' : 语法检查失败,查看*message*.
   'FlyC?' : 语法检查出现可疑结果,查看*message*.

* 比较文件

  M-x,diff : 指定两个文件,比较它们的差异.使用diff-mode显示比较结果.
  M-x,diff-backup : 指定一个文件,比较该文件和其最近一个备份文件的差异.(如果指定的是备份文件,则比较该备份文件与原文件的差异).
  M-x,diff-buffer-with-file : 指定一个buffer,比较该buffer和其关联文件的差异.用于显示该buffer相对于原文件所做的修改.
  M-x,compare-windows : 比较当前window中的内容和下一个window中的内容.
  M-x,smerge-mode : 一个minor-mode,用于编辑diff3程序的输出.

* Ediff

Ediff使用POSIX diff和diff3程序来比较文件间的差异,然后将输出结果可视化.

** 启动
   
   M-x,ediff-documentation: 显示Ediff手册.

   M-x,ediff-files/ediff: 比较两个文件.
   M-x,ediff-files3/ediff3: 比较三个文件.

   M-x,ediff-backup: 比较文件和其(最新的)备份文件;若当前文件本身时备份文件,则和其原文件进行比较.
   M-x,ediff-current-file: 比较当前buffer和其关联的文件.

   M-x,ediff-buffers: 比较两个buffer.
   M-x,ediff-buffers3: 比较三个buffer.

   M-x,edirs/ediff-directories: 比较两个目录中的公共文件.
   M-x,edirs3/ediff-directories3: 比较三个目录的公共文件.
   
   M-x,ediff-merge-files/ediff-merge: 合并两个文件.
   M-x,ediff-merge-files-with-ancestor/ediff-merge-with-ancestor: 使用指定的祖先,合并两个文件.
   
   M-x,ediff-merge-buffers:合并两个buffer.
   M-x,ediff-merge-buffers-with-ancestor: 使用指定祖先,合并两个buffer.

   M-x,edirs-merge/ediff-merge-directories: 合并两个目录中的公共文件.
   M-x,edirs-merge-with-ancestor/ediff-merge-directories-with-ancestor: 使用指定祖先,合并两个目录中的公共文件.
   
   M-x,ediff-merge-revisions: 合并当前buffer所关联文件的不同版本.
   M-x,ediff-merge-revisions-with-ancestor: 使用指定祖先,合并当前buffer所关联文件的不同版本.

   M-x,edir-revisions/ediff-directory-revisions: 比较指定目录下文件的不同版本,文件必须纳入版本控制.
   M-x,edir-merge-revisions/ediff-merge-directory-revisions: 合并指定目录下文件的不同版本,文件必须纳入版本控制.
   M-x,edir-merge-revisions-with-ancestor/ediff-merge-directory-revisions-with-ancestor: 合并指定目录下文件的不同版本用其他版本作为合并祖先,文件必须纳入版本控制.
   
   M-x,ediff-windows-wordwise: 一个单词一个单词地比较不同的窗口.
   M-x,ediff-windows-linewise: 一行一行地比较不同的窗口.
   
   M-x,ediff-regions-wordwise: 一个单词一个单词地比较不同区域.(可以比较同一buffer内重叠的区域)
   M-x,ediff-regions-linewise: 一行一个行地比较不同区域.

   M-x,ediff-revision: 比较当前buffer的不同版本,如果该buffer关联的文件被纳入版本控制.
   
   M-x,ediff-patch-file/epatch: 给一个或多个文件打补丁,然后比较.(将改变磁盘上的文件内容.)
   M-x,ediff-patch-buffer/epatch-buffer: 给一个buffer打补丁,然后比较.(将使用额外的buffer执行操作,原buffer及其关联的文件并不改变.)
   
   M-x,ediff-show-registry/eregistry : Brings up Ediff session registry.
   
** 常用命令

   大多数命令可以添加数字前缀.(直接用数字,不用C-u).

   '?': 开启/关闭帮助窗口.
   'v'/'V': 同步向上/下滚屏.
   '<'/'>': 同步向左/右滚屏.
   'wd': 保存diff程序的输出.
   'wa'/'wb'/'wc': 保存buffer A/B/C.
   'a'/'b': 在比较模式下,将当前差异部分从buffer A/B拷贝到buffer B/A的相应处. 在合并模式下,将当前差异部分从buffer A/B拷贝到merge buffer的相应处.
   'ab'/'ac'/'ba'/'bc'/'ca'/'cb': 将差异从前一个buffer拷贝到后一个buffer.仅在处理三个文件时适用.
   'p'/'n': 跳转到上/下一个差异处.
   'j'/'-j'/'Nj': 跳转到第一个/最后一个差异处,可加正负参数N,表示跳转到第N个差异处.
   'ga'/'gb'/'gc': 在buffer A/B/C中,跳转到距离当前光标位置最近的差异处.
   '!': 刷新差异.
   '*': 强制对当前差异处进行精确差异计算,精确到单词.
   'm': 将当前Ediff sesion所在frame最大化.
   '|': 切换水平/垂直划分显示方式.
   '@': 切换是否开启auto-refinement(高亮差异,精确到单词).
   'h': 
   'r': 撤销merge buffer中的上一次改动.仅在merge session中有效.
   'ra'/'rb'/'rc': 撤销buffer A/B/C中的上一次改动.仅在comparison session中有效.
   '##': 跳过只有空白或换行的差异处.
   '#c': 切换是否大小写敏感.
   '#h'
   'A'/'B'/'C': 切换buffer A/B/C的只读模式.
   '~': 交换buffer A/B/C的窗口.
   'i': 在当前Ediff session中显示所有有用的数据.
   'D': 执行ediff-custom-diff-program.
   'R': 列出所有活跃的Ediff sessions.
   'M': 
   'z': 挂起当前Ediff session.(可用'R'列出并恢复)
   'q': 结束当前Ediff session.
   '%': 切换在比较窗口或区域时,是否对其narrowing.
   'C-l': 恢复窗口布局.
   '/': 在合并时,显示祖先文件.
   's': 最小化merge window,再按一次将恢复窗口大小.可加数字前缀:'3s'(将窗口增加3行), '-2s'(将窗口缩减两行).
   '+': 合并Buffer A和Buffer B中的差异,并将结果拷贝到merge buffer.
   '='

   其他与合并有关的命令：
   '$$'
   '$*'

* Programs

  M-x,imenu,[函数名]: 跳转到指定函数. (26.2.3)
  M-x,which-function-mode: 在mode-line显示当前所在函数名. (26.2.4)
  
** 缩进
   <TAB> : 缩进当前行或所选区域.
  
* org

** 折叠/展开

   <TAB> : 展开/折叠当标题下内容.
   S-<TAB> : 展开/折叠所有标题内容.

** 结构编辑

   M-<RET> : 在当前光标后插入同级标题.若光标处于一行的中间, 则该行后面内容成为新的同级标题.
   C-<RET> : 在当前子树后插入同级标题.

   M-S-<RET> : 在当前光标后插入与当前标题同级的TODO项.若光标处于一行的中间, 则该行后面内容成为新的TODO项.
   C-S-<RET> : 在当前子树后插入与当前标题同级的TODO项.

   M-<left>/<right> : 升高(减少*)/降低(增加*)当前标题层级.
   M-S-<left>/<right> : 提升/降低当前子树一个层级.
   M-S-<up>/<down> : 将当前子树向上/下移动(光标必须处于子树标题.). 

   C-c,@ : 选定当前子树.
   C-c-x-w : 剪切当前子树. 数字前缀"N"表示剪切N个子树.
   C-c-x,M-w : 复制当前子树. 数字前缀"N"表示复制N个子树.
   C-c-x-y : 粘贴剪切环中的子树.将根据粘贴从处的位置，来自动调整子树的层级.
   C-c-x-c: 克隆当前子树.
   C-c-w : refile.
   C-c,^ : 排序.

   C-x,n,s: 只显示当前子树内容.
   C-x,n,b: 只显示当前块.
   C-x,n,w: 恢复.

   C-c,*: 将标题行变为普通行;或将当前行变为标题行.
   
** 稀疏树

   稀疏树用于显示整个文档中被查找的部分.
   
   C-c,/ : 启动稀疏树查找模块.
   
** 光标移动

   C-c-n/p : 移动到下/上一个标题.
   C-c-f/b : 移动到下/上一个同级标题.
   C-c-u : 移动到上级标题.
   C-c-j : 不改变当前文档的可视性布局，在另一个临时buffer中显示当前文档。
   
** 列表

   + 无序列表 :: 以'-', '+', '*'开头.
   + 有序列表 :: 以'1', '1.'开头.
   + 解释性列表 :: 以' :: '分隔不同项.
** 表格
** Todo

   C-c-t : 循环切换TODO项的状态.
   S-<left>/<right> : 切换到的上/下一个TODO项状态.
   C-c,/,t : 在稀疏树中显示所有TODO项.
   C-c,a,t : 在另一个buffer中显示所有TODO项.
   S-M-<RET> : 在当前项下, 插入新的TODO项.
   C-c,, : 设置当前TODO项的优先级. 
   S-<up>/<down> : 上调/下调当前TODO项的优先级.

* TRAMP

  /sudo::文件路径 : 以root权限打开指定文件.

  访问文件:
  /[METHOD:][USER@][HOST#PORT:][PATH]
* Dired
** 进入与退出
  
   C-c-f, [目录] / C-x,d [目录] : 在当前窗口中,用Dired打开某目录. 加"C-u"可以指定ls的参数.
   C-x,4/5,d [目录] : 在另一窗口/框架中打开Dired.
   进入到Dired buffer后,可用"q"退出Dired并返回原buffer.
   dired-listing-switches : 控制ls命令的参数.
  
** 光标移动

   n/p : 光标移动到下/上一个文件名首.
   j [文件名] : 将光标移动到指定文件上.

** 搜索

   M-s,f,C-s : 正向递增搜索文件名.(仅匹配文件名)
   M-s,f,C-M-s : 正向正则递增搜索文件名.(仅匹配文件名)
   dired-isearch-filenames : 为t时,"C-s"将执行文件名搜索;为'dwim'时,仅当光标处于文件名时,"C-s"才执行文件名搜索.
   
** 打开文件

   'f' : 在当前窗口打开光标所在文件.
   'o' : 在另一窗口打开光标所在文件,并选中.
   C-o : 在另一窗口打开光标所在文件,但不选中.
   'v' : 用view-mode打开光标所在文件.可以用'q'退出.
   '^' : 进入当前目录的上层目录.

** 删除文件

   d/u : 将当前文件标记为待删除/移除当前文件标记,并将光标移动至下一文件.
   可对选中区域的所有文件执行操作.(参数前缀表示正向重复的次数,负参数表示反向重复的次数).

   x : 删除所有被标记文件.

   注: 只能删除空目录无法,无法删除非空目录.
   dired-recursive-deletes : 非nil,则可以直接删除非空目录.
   delete-by-moving-to-trash : 设为t则将文件放入回收站.

** 标记文件

*** 将文件标记为D

   'd' : 标记 当前文件.
   '#' : 标记所有 自动保存的文件.("#file#").
   '~' : 标记所有 备份文件文件.("file~")
   '.' : 标记 将除最新和最旧之外的所有备份文件.
   '% &' : 标记所有 文件名匹配变量dired-flag-garbage-files所定义的正则表达式的文件.(包括Latex产生的特定文件,和.bak, .orig, .rej文件.)
   '% d [regexp]' : 标记所有 文件名匹配regexp的文件.
   
*** 将文件标记为*   

   'm'  : 标记 当前文件.
   '**' : 标记所有 可执行文件. "C-u"前缀,反标记.
   '*@' : 标记所有 符号链接. "C-u"前缀,反标记.
   '*/' : 标记所有 目录(除了"."和".."). "C-u"前缀,反标记.
   '*s' : 标记所有 文件(除了"."和"..").
   '% m [regexp]' : 标记所有 文件名匹配regexp的文件.
   '% g [regexp]' : 标记所有 文件内容匹配regexp的文件.
   '* c [oldmark] [newmark]' : 将所有标记为oldmark的文件标记为newwark.
      
   'u/Backspace'  : 反标记下/上一个文件. 可对选中区域的所有文件执行操作.正/负参数表示正/反向重复的次数(正/负参数表示反/正向重复的次数).
   M-Backspace [mark] : 反标记所有 标记为mark的文件.
   'U'  : 反标记 所有文件.
   't'  : 反标记所有标记为*的文件,同时将所有未被任何标记的文件标记为*.
   
   M-{/} : 移动到上/下一个被标记文件.
   
** 文件操作

   注: 以下所有操作,若带有正/负参数,则代表对下/上参数个文件执行;
   若有*标文件,则对*标文件执行; 否则,对当前文件执行.

   'C [new]' : 将文件拷贝到目标目录中.
   'D' : 删除文件.
   'R [new]' : 移动或重命名. 若是单个文件,则new为新文件名; 若是多个文件,new为目标目录(此时相当于mv命令).
   'H/S [new]' : 在指定位置为当前项创建硬/符号链接. 若是单个文件,则new为新链接名; 若是多个文件,new为目标目录.
   'M [newnode]' : 改变文件的权限(mode). newmode可以是8进制或符号表示法.
   'G [newgroup]' : 改变文件的组(group).
   'O [newowner]' : 改变文件的所有者(owner).(需要root权限)
   'T [timestap]' : 改变文件的时间戳.默认为当前时间.
   'P [command]' : 打印文件.
   'Z' : 压缩文件. 若文件已经时压缩文件,则对其解压.
   ':d' : 解密文件.
   ':v' : 核实文件的数字签名.
   ':s' : 对文件进行数字签名.
   ':e' : 加密文件.
   'L'  : 载入指定的emacs lisp文件.
   'B'  : 字节编译指定的emacs lisp文件.
   'A [regexp]' : 在所有指定文件中搜索regexp.(tag-search)
   'Q [regexp]' : query-replace-regexp.
   
** shell命令

   30.8
   
** 文件重命名
   
   注: 以下所有操作,若带有正/负参数,则代表对下/上参数个文件执行;
   若有*标文件,则对*标文件执行; 否则,对当前文件执行.

   '% u/l' : 将文件名变为大/小写.
   `% R FROM  TO ' : 
   `% C FROM  TO ' : 
   `% H FROM  TO ' :
   `% S FROM  TO ' :

** 比较文件
   '= [file]' : diff-mode比较当前文件和指定文件file.

** 子目录
   
   'i' : 将当前目录下的内容插入到Dired buffer末尾. (可用"C-u,SPC"返回到光标原先位置).
   'l' : 更新子目录内容.
   C-u,k : 移除子目录的显示.光标需要置于显示的子目录文件所在行上.
   
   </> : 移动到上/下一个子目录.
   C-x,[/] : 向上/下跨过目录的完整列表.
   C-M-n/p : 移动到下/上一个子目录列表头.
   C-M-u/d : 移动到当前目录的 父/第一个显示的子 目录头.
   
   注: 隐藏目录下的文件将不受任何文件操作的影响.
   '$' : 将当前光标所在子目录列表隐藏/使可见.
   'M-$' : 将当前dired-buffer中的所有子目录列表隐藏/使可见.

** 更新dired buffer
   
   'g' : 更新整个dired buffer的内容,保留已有的文件标记.
   'l' : 更新指定文件或目录. (*标文件,当前文件,前/后N个文件)
   'k' : 仅删除*标文件的文件行(并不删除文件本身).删除的文件行可用'g'命令恢复.
   's' : 切换文件的排序方式(字母序或时间序). mode-line中有显示.
   'C-u,s,[swithces]' : 以switches重新ls.
   
** 编辑dired buffer

   C-x-q : 进入编辑模式.(Wdired-mode)
   C-c-c : 保存编辑结果并退出编辑模式.
   
** 其他
   
   '+' : 新建目录.
   M-s,a,C-s : 对*标文件执行增量搜索.
   M-s,a,C-M-s : 对*标文件执行正则增量搜索.
   'w' : 将(当前文件或*标文件的)文件名复制到kill ring中. "C-u 0"前缀,复制文件的绝对路径; "C-u"前缀, 复制文件相对于当前dired buffer默认目录的路径.
   '(' : 切换是否显示文件详细信息(权限,时间等等)
   M-x,dired-compare-directories : 比较当前dired buffer和另一个目录的内容.

** dired-x
   C-x,M-o : 切换是否忽略不感兴趣的文件.
   '*O': 标记不感兴趣的文件
   
   C-x-j : 跳转到当前buffer所在的目录(dired).

* IBuffer

  进入IBuffer-mode时, 键入'h'可查看以下命令:

** 标记buffer

   'm': 标记当前buffer.
   'u': 反标记当前buffer.
   'd': 将当前buffer标记为待删除.
   'DEL': 反标记当前buffer, 同时将光标上移一行.
   'M-DEL': 反标记所有buffer.
   't': 反标记所有已标记的buffer, 同时标记所有未标记的buffer.
   
   '* M': 基于major mode标记buffer.
   '* s': 标记所有系统buffer, 即名为*name*的buffer.
   '* r': 标记所有只读buffer.
   '* /': 标记所有dired-mode的buffer.
   '* h': 标记所有help-mode, apropos-mode等mode的buffer.
   
   '* u': 标记所有已修改但未保存的buffer, 这些buffer必须关联磁盘上的文件.
   '* m': 标记所有已修改的buffer, 无论这些buffer是否关联磁盘上的文件.
   '* e': 标记所有具有关联文件但该文件当前不存在的buffer.
   '.' :  标记所有时间晚于"ibuffer-old-time"的buffer.

   '% n': 标记所有名称匹配指定正则表达式的buffer.
   '% m': 标记所有major mode匹配指定正则表达式的buffer.
   '% f': 标记所有文件名匹配指定正则表达式的buffer.

** 处理被标记的buffer

   'x': 删除所有被标记为待删除的buffer.
   'D': 删除所有被标记的buffer.
   'S': 保存所有被标记的buffer.

   'A': 将当前frame水平分割成多个窗口, 每个窗口显示一个被标记的buffer.
   'H': 为每个被标记的buffer新建一个frame并显示.
   'T': 切换所有被标记buffer的只读模式.
   'V': revert所有被标记的buffer.
   'k': 将被标记的buffer移除IBuffer列表, 但不删除.
   'P': 打印被标记的buffer.

   'M-s a C-s': 在所有被标记buffer中进行增量查找.
   'M-s a C-M-s': 在所有被标记buffer中进行正则表达式查找.
   'U': 在所有被标记buffer中进行正则表达式替换.
   'Q': 在所有被标记buffer中进行询问替换(query replace).
   'I': 同'Q', 但使用正则表达式.
   'O': 列出所有被标记buffer中匹配指定正则表达式的行.

   'X': 将被标记buffer的内容pipe到某个shell命令.
   'N': 将被标记buffer的内容替换为某个shell命令的输出.
   '!': 将被标记buffer的文件作为参数传递给某个shell命令.

   'E': 为每个被标记的buffer执行一个特定的命令.
   'W': 同'E', 但当命令执行时显示该buffer.
   
** 过滤器
   
   使用过滤器之后, IBuffer列表中将只显示符合条件的buffer. 以下过滤器可
   以组合使用:

   '/ m': 基于当前正在使用的major mode进行过滤.
   '/ M': 基于derived major mode进行过滤.
   '/ n': 基于buffer名进行过滤.
   '/ c': 基于buffer内容进行过滤.
   '/ f': 基于buffer所关联的文件名进行过滤.
   '/ >': 基于buffer大小进行过滤(只选择size大于指定大小的buffer).
   '/ >': 基于buffer大小进行过滤(只选择size小于指定大小的buffer).
   '/ e': 基于指定elisp谓词函数进行过滤.
   '/ s': 保存当前所用的过滤器, 并为其命名.
   '/ r': 切换到指定的已保存过滤器.
   '/ a': 将所保存的过滤器添加到当前过滤器中.
   '/ o': 将最近两个使用的过滤器进行'逻辑或'.
   '/ p': 移除最近使用的过滤器.
   '/ !': 逆转最近使用的过滤器的逻辑关系.
   '/ d': Break down the topmost filter.
   '/ /': 移除所有过滤器.

** 过滤器组

   '/ g': 创建基于当前过滤器的buffer组.
   '/ P': 移除最近使用的过滤器组.
   'TAB': 光标移动到下一个过滤器组.
   'M-p': 光标移动到上一个过滤器组.
   '/ \': 移除所有活跃的过滤器组.
   '/ S': 保存当前过滤器组并为其命名.
   '/ R': 恢复上一个保存的过滤器组.
   '/ X': 删除上一个保存的过滤器组.

** 排序
   
   's a': 基于buffer名的字典序排序.
   's f': 基于buffer所关联文件名的字典序排序.
   's v': 基于buffer的最近访问时间排序.
   's m': 基于buffer的主模式进行排序.
   's s': 基于buffer大小进行排序.
   's i': 反转当前顺序.
   ','  : 轮询以上顺序.

** 其它命令
   
   'g': 刷新IBuffer列表.
   '`': 精简列表显示格式.
   'n/p': 光标下/上移一行.
   'q' : 退出.
   '=' : 查看当前buffer与其关联文件之间的差异.
   'RET': 在当前窗口显示当前buffer.
   'o' : 在另一窗口显示当前buffer, 并选中.
   'C-o': 在另一窗口显示当前buffer.
   'b' : 从IBuffer列表中删除(但不kill)当前buffer.

* Meghanada

** 函数
   
   1. meghanada-install-server
      安装meghanada服务器.

   2. meghanada-update-server
      下载并更新meghanada服务器.

   3. meghanada-server-start
      启动并连接到meghanada服务器.

   4. meghanada-restart
      重启meghanada服务器和客户端.

   5. meghanada-server-kill
      杀死meghanada服务器进程.

   6. meghanada-client-direct-connect
      Connect to other meghanada-server directly.

   7. meghanada-client-connect
       连接到meghanada服务器.

   8. meghanada-client-disconnect
       断开与meghanada服务器的连接.

   9.  meghanada-ping
       ping meghanada服务器.

   10. meghanada-clear-cache
       清空meghanada服务器当前项目的cache.

   11. meghanada-import-all (C-c C-r i)
       添加所有需要的import.

   12. meghanada-optimize-import (C-c C-r o)
       添加所有需要的import, 并删除所有不需要的import.

   13. meghanada-import-at-point
       为光标所在符号添加import.

   14. meghanada-local-variable (C-c C-r r)
       Introduce local variable. (need expression is end ;).

   15. meghanada-compile-file (C-c C-c C-c)
       编译当前文件(及相关文件).

   16. meghanada-project-compile (C-c C-c c)
       编译整个项目.

   17. meghanada-show-project
       显示当前项目的详细信息.

   18. meghanada-exec-main
       执行主类.

   19.     

* eshell
  
  eshell执行命令的顺序:
  1. 先执行同名的alias.
  2. 若没有, 则执行内置同名命令.
  3. 若没有, 再执行同名外部命令.

  ';' : 一行中分隔多条命令.
  '&' : 后台执行.
  *[command] : 选择执行外部命令command, 而非ehsell内置同名命令.

** 内置命令

   [command] --help : 查看该命令帮助.

   which : 用于查看命令类型(内置, 外置, 别名).
   addpath : 添加路径到环境变量PATH中.(无参数, 则打印PATH变量)
   clear : 清理屏幕.
   date : 查看日期时间.
   alias [command] 'command's alias' : 为command定义别名.(所有别名都保存在eshell-aliases-file指定的文件中)
   define : 定义可变别名.
   diff : 使用emacs内置diff(并非ediff).
   grep/agrep/egrep/fgrep/glimpse : emacs内置grep命令.
   info : emacs内置info reader.
   jobs : 查看emacs进程.
   kill : 杀死进程.
   listify : 
   locate : 是外部命令locate的别名.
   make: 
   occur : emacs occur的别名.
   printnl : 按行打印其参数.
   cd : 'cd =' 可以查看目录栈, 'cd -n': 进入命令栈中指定目录.
   su/sudo : 使用TRAMP内置的su/sudo方法.
   
** 历史记录

   历史命令保存在由变量'eshell-history-file-name'所指定的文件中;保存的
   历史命令个数, 由'eshell-history-size'变量指定.

   history : 查看命令行历史.
   !n : 执行第n条历史命令.
   !foo : 执行最后一个以'foo'打头的历史命令.
   !?foo : 执行最后一个包含'foo'的历史命令. 
   
   M-r/s : 正反向搜索.
   M-p/n : 上/下一条历史命令.

** 内置变量
   
   '$+' : 保存当前目录.
   '$-' : 保存最近一次使用过的目录.
   '$_' : 保存最近一次命令的最后一个参数.
   '$$' : 保存最近一次命令的输出结果.
   '$0' : 保存最近一次命令的退出码(0或1).

   eshell-prefer-lisp-functions : 设置为't'时, 优先使用eshell内置命令.
** 命令行扩展

   $var: 扩展为var所绑定的变量值.
   $#var: 扩展为var所绑定的序列长度.(var必须是序列, 否则报错).
   
   $var[i]: 扩展为var所绑定变量的第i个元素(从0开始).(var必须是序列, 否
   则报错). 若var是字符串, 则需要以空白符分隔不同元素.
   
   $(lisp): 扩展为执行符号表达式(lisp)所得的结果.
   ${command}: 扩展为执行command命令后所得的结果.
   
   ‘$var[: i]’
     As above, but now splitting occurs at the colon character.

‘$var[: i j]’
     As above, but instead of returning just a string, it now returns a
     list of two strings.  If the result is being interpolated into a
     larger string, this list will be flattened into one big string,
     with each element separated by a space.

‘$var["\\\\" i]’
     Separate on backslash characters.  Actually, the first argument –
     if it doesn’t have the form of a number, or a plain variable name –
     can be any regular expression.  So to split on numbers, use
     ‘$var["[0-9]+" 10 20]’.

‘$var[hello]’
     Calls ‘assoc’ on ‘var’ with ‘"hello"’, expecting it to be an alist
     (*note Association Lists: (elisp)Association List Type.).

‘$#var[hello]’
     Returns the length of the cdr of the element of ‘var’ who car is
     equal to ‘"hello"’.

** 重定向

   eshell暂不支持输入重定向.

   >/>> [文件]: 重定向输出到指定文件.
   >>> #<BUFFER-NAME>: 重定向输出到指定buffer(若不存在则创建).
   
