* gdb
** 设置命令行参数
  set args [参数1] [参数2] ....
  show args 显示设置好的参数

** 设置断点
   b [行号] : 在指定行设置断点.
   b [文件名:行号] : 在指定文件的指定行设置断点.
   b [函数名] : 在指定函数处设置断点.

** 显示断点
   info b
   
** 删除断点
   delte : 删除所有断点.
   delete [断点号] : 删除指定断点.
   delete [n-m] : 删除断点n至m.
   
** 显示变量

  p [变量] : 显示变量值.
  p *array@len : 显示动态分配的数组array的前len个元素.

*** 自动显示
  display [/f] [表达式] : 每一步中都自动显示表达式的值, 以格式f显示.
  undisplay [编号] : 删除指定的自显量.
  disable/enable display [编号] : 禁用/启用指定的自显量.
  info display : 查看所有自显量的信息.

** 调试

  n(ext) [数字] : 单步运行,不进入函数. 数字表示一次进行几步.
  s(tep) [数字] : 单步运行,进入函数. 数字表示一次进行几步.
  c(ontinue)   : 继续执行程序,直到下一个断点或程序结束. 
  finish : 退出函数.
  bt(backtrace) : 查看函数调用栈.

* gcc
   只处理'.c'文件, 不处理'.h'文件.

** 预处理(-E)
   对源文件进行预处理,生成预处理过的代码(.i)
   gcc -E file.c -o file.i 
    
** 编译(-S)
   文本 -> 文本: 对预处理过的代码进行编译(语法解析和汇编代码生成),生成汇编语言代码(.s)
   gcc -S file.i(c) -o file.s
   
** 汇编(-C)
   文本 -> 二进制机器码: 对汇编语言代码进行汇编,生成二进制的目标文件(.o)
   机器代码的生成与处理器有密切的联系,相对于编译过程的语法解析,汇编的过程相对简单,这是因为对于一款特定的处理器，其汇编语言和二进制的机器代码是一一对应的
   gcc -C file.s(c) -o file.o

** 链接
   对多个二进制目标文件进行链接,生成可执行文件.
   gcc file_1.o file_2.o file_3.o .... -o file

** 库
   
   当静态库与动态库同名时,gcc优先选择动态库.
   -L[目录] : 添加(动态/静态)库文件目录.
   -l[库名] : 添加库文件.

   nm libxxx.so(a) : 查看库中所定义的符号(T表示该库所定义的符号,U表示该库所引用的符号,w表示弱符号).
   可用: 'nm libxxx.so(a) | grep U/T/w' 来查看
   
   命名规则: libxxx.so(a).主版本号.次版本号

*** 动态库
    命名: lib[库名].so
    创建: 由多个.o文件链接而成.
    gcc -shared file1.o file2.o ...  -o lib[库名].so
    注:其中每个file.o编译时必须加入-fPIC.

    加载: 系统会自动搜寻在/lib/和/usr/lib/目录下的库.
          1. 在/etc/ld.so.conf.d/目录下新建一个文件(pz.conf),并将动态库库所在的目录添加到该文件中.
          2. 运行ldconfig命令.

*** 静态库
    命名: lib[名称].a
    创建: 由多个.o文件打包而成.
    ar -rc lib[库名].a file1.o file2.o ... 

** 常用选项
   -I[目录] : 添加头文件搜索目录. ('.c'文件中,include的'.h'文件可以不用添加路径)
   -fPIC(Position Independent Code): 生成位置无关的代码,编译动态库的.o文件时必须加上该参数.
   -shared: 多个.o文件链接成.so文件时必须加上该参数.
   -m32/-m64 : 编译成32/64位程序.


* git

** 配置
*** 配置文件: 
   /etc/gitconfig : 系统中对所有用户都普遍适用的配置. (--system)
   ~/.gitconfig : 用户目录下的配置文件只适用于该用户. (--global)
   .git/config : 当前项目的 git 目录中的配置文件, 仅仅针对当前项目有效.
   注：每一个级别的配置都会覆盖上层的相同配置. 所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量.

*** 配置选项   
  git config --global user.name ["用户名"] : 设置用户名.
  git config --global user.email [电子邮箱] : 设置邮箱.
  git config --global core.editor [文本编辑器]: 设置默认文本编辑器.
  git config --global merge.tool [ediff] : 将ediff设置为差异分析工具.
  
  git config --list : 查看已有的配置信息.
  git config [变量] : 查看某个[变量]的值. 如: 'git config user.name'.

** 初始化新仓库

   git init : 将当前工作目录初始化为新的仓库(.git),但没有跟踪任何文件.
   git add [文件或目录] : 对于已跟踪文件,将该文件加入暂存区. 若文件未被跟踪,则开始跟踪该文件.若指定目录则对目录下所有的文件进行操作.
   
   git clone [仓库的url] [新名称]: 将远程仓库克隆到当前目录下,并将其命名为[新名称].(若未指定名称,则用远程仓库的原名称.)
   git status : 查看当前目录下各文件的状态.
   .gitignore : 存放所有将被git忽略的文件格式.

** git diff : 查看已暂存和未暂存的更新.此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容.
   --cached(staged) : 查看已经暂存起来的文件和上次提交时的快照之间的差异.

** 提交更新

   git commit : 将暂存区的文件提交,提交后暂存区将为空.(将启动文本编辑器用于编写本次提交的说明)
   -m '提交说明' : 直接在命令行中编写提交说明.
   -a : 跳过暂存区,把所有已经跟踪过的文件暂存起来一并提交.(跳过git add步骤)
   --amend : 用当前提交覆盖上一次提交.

** 移除文件   

   git rm [文件] : 将指定文件从git仓库中移除,同时删除该文件本身.(只能移除未暂存的.)
   --cache : 仅从git仓库中删除,仍保留原文件.
   -f : 强制删除已暂存的文件.

** 移除已暂存文件

   git reset HEAD [文件] : 将指定文件移除缓冲区(恢复为"已修改未暂存"状态).

** 取消对文件的修改

   git checkout [文件] : 取消对当前文件的修改,恢复到以前版本(把之前版本的文件复制过来重写了此文件).(较危险不可逆)

** 移动(重命名)文件

   git mv [file_from] [file_to] : 将文件[file_from]移动至[file_to]

** 查看更新历史

   git log
    -p 按补丁格式显示每个更新之间的差异。
    -(n) 仅显示最近的 n 条提交
    --since, --after 仅显示指定时间之后的提交。
    --until, --before 仅显示指定时间之前的提交。
    --author 仅显示指定作者相关的提交。
    --committer 仅显示指定提交者相关的提交
    --stat 显示每次更新的文件修改统计信息。
    --shortstat 只显示 --stat 中最后的行数修改添加移除统计。
    --name-only 仅在提交信息后显示已修改的文件清单。
    --name-status 显示新增、修改、删除的文件清单。
    --abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
    --relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。
    --graph 显示 ASCII 图形表示的分支合并历史。
    --pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。
    --pretty=format:"%h - %an, %ar : %s"
	 %H 提交对象（commit）的完整哈希字串
	 %h 提交对象的简短哈希字串
	 %T 树对象（tree）的完整哈希字串
	 %t 树对象的简短哈希字串
	 %P 父对象（parent）的完整哈希字串
	 %p 父对象的简短哈希字串
	 %an 作者（author）的名字
	 %ae 作者的电子邮件地址
	 %ad 作者修订日期（可以用 -date= 选项定制格式）
	 %ar 作者修订日期，按多久以前的方式显示
	 %cn 提交者(committer)的名字
	 %ce 提交者的电子邮件地址
	 %cd 提交日期
	 %cr 提交日期，按多久以前的方式显示
	 %s 提交说明
    
** 远程仓库
   
   git remote : 查看每个远程库的简短名字.
       -v : 同时显示地址.
   git remote show [远程仓库名] : 查看远程仓库信息.
   git remote add [简称] [远程仓库URL] : 添加远程仓库,并为其设置简称.
   git fetch [远程仓库] : 从远程仓库中获取所有本地仓库中没有的数据.
   git push [远程仓库] [分支名] : 推送数据到远程仓库.
   git remote rename [原名称] [新名称] : 修改远程仓库在本地的简称.
   git remote rm [远程仓库] : 删除指定远程仓库.
   
** 分支

*** 创建新分支

    git branch [新分支名] : 在当前提交对象上创建新分支,但不切换.(HEAD指针仍指向原分支)

*** 重命名本地分支
    
    git branch -m [原分支名] [新分支名]

*** 切换分支

    注: 切换分支前,最好先提交当前分支,保证一个清洁的工作区域.
    git checkout [分支] : 切换到指定分支.(HEAD指针移动到指定分支,同时切换工作目录)
       -b : 新建并切换到新分支.
    
*** 删除分支

    git branch -d [分支] : 删除指定分支.(通常删除已经被合并的分支)

*** 合并分支

    git merge [分支] : 将指定分支于当前所在分支进行合并.

*** 解决冲突

    1. 在执行分支合并后,使用'git status'来查看哪些文件存在冲突.
    2. 直接打开文件手动或调用工具解决冲突.
    3. 使用'git add [冲突文件]' 将处理完冲突后的文件重新加入暂存区.

*** 管理分支

    git branch : 无参数则列出当前所有分支.('*'表示当前所在分支)
    -v : 查看各个分支最后一个提交对象的信息.
    --merge : 列出已经与当前分支合并的分支.
    --no-merged : 列出尚未与当前分支合并的分支.
    
*** 跟踪远程分支

    git checkout -b [本地分支] [远程仓库]/[远程分支] : 在本地创建一个指定分支来跟踪远程分支.
    git checkout --track [远程仓库]/[远程分支] : 在本地创建一个同名分支来跟踪远程分支.

*** 删除远程分支

    git push [远程仓库]:[远程分支] : 删除远程仓库里的指定分支.
